{
    "swagger": "2.0",
    "info": {
        "description": "This is the API document for xspace server.",
        "title": "Xspace-Server API",
        "contact": {},
        "version": "1.0"
    },
    "host": "xspace.docs.org",
    "basePath": "/",
    "paths": {
        "/v1/challenge": {
            "get": {
                "description": "Get the challenge message by address before you login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "User's address (connect to xspace)",
                        "name": "address",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The network ID which the user's wallet is connected to",
                        "name": "chainid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The frontend's domain",
                        "name": "Origin",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The challenge message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/v1/login": {
            "post": {
                "description": "Use the signMessage method to sign the challenge message. After signing, call the login interface to complete the login.\nIf the login is successful, the Login API will return an Access Token and a Refresh Token. When accessing subsequent APIs, you need to add the Authorization field in the headers with the value \"Bearer Your_Access_Token\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "parameters": [
                    {
                        "description": "The challenge message",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The result after the user's private key signs the challenge message",
                        "name": "signature",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The access token and refresh token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/v1/nft/data/info": {
            "get": {
                "description": "Get DataNFT content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "NFT"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer YOUR_ACCESS_TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "DataNFT's id",
                        "name": "tokenID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DataNFT binary content",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/v1/nft/list": {
            "get": {
                "description": "List all NFT information belonging to the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer YOUR_ACCESS_TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Pages",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The amount of data displayed on each page",
                        "name": "size",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT type (1 for tweetNFT, 2 for dataNFT, tweetNFT and dataNFT will be all listed by default)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order rules (date_asc for sorting by creation time from smallest to largest, date_dsc for sorting by creation time from largest to smallest)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.ListNFTRes"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/v1/nft/mint": {
            "post": {
                "description": "Mint user's data into NFTs",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer YOUR_ACCESS_TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "User's data",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.MintRes"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {}
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {}
                    }
                }
            }
        },
        "/v1/nft/tweet/info": {
            "get": {
                "description": "Get TweetNFT content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer YOUR_ACCESS_TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "TweetNFT's id",
                        "name": "tokenID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.TweetNFTInfoRes"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/v1/point/charge": {
            "post": {
                "description": "Users can charge once every 6 hours",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Point"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer YOUR_ACCESS_TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.PointInfoRes"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/v1/point/history": {
            "get": {
                "description": "Get the history of the point info by address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Point"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer YOUR_ACCESS_TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Pages",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The amount of data displayed on each page",
                        "name": "size",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Order rules (date_asc for sorting by creation time from smallest to largest, date_dsc for sorting by creation time from largest to smallest)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.PointHistoryRes"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/v1/project/list": {
            "get": {
                "description": "List all projects with Xspace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rank"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.ListProjectsRes"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/v1/project/rank": {
            "get": {
                "description": "Get the ranking of cooperative projects",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rank"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "cooperative project id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Pages",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The amount of data displayed on each page",
                        "name": "size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.RankRes"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/v1/refer/bind": {
            "post": {
                "description": "Bind the refer code when first log in",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Refer"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer YOUR_ACCESS_TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Other user's refer code",
                        "name": "code",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/v1/refer/info": {
            "get": {
                "description": "Get the user's refer code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Refer"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer YOUR_ACCESS_TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user's refer code",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/v1/refresh": {
            "post": {
                "description": "If the access token expires, you can call the refresh API to get a new access token or log in again.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer YOUR_FRESH_TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The access token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    }
                }
            }
        },
        "/v1/user/info": {
            "get": {
                "description": "Get the user basic info by address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer YOUR_ACCESS_TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/router.PointInfoRes"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "router.ListNFTRes": {
            "type": "object",
            "properties": {
                "nftInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/router.NFTInfo"
                    }
                }
            }
        },
        "router.ListProjectsRes": {
            "type": "object",
            "properties": {
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/router.ProjectInfo"
                    }
                }
            }
        },
        "router.MintRes": {
            "type": "object",
            "properties": {
                "tokenID": {
                    "type": "integer"
                }
            }
        },
        "router.NFTInfo": {
            "type": "object",
            "properties": {
                "createTime": {
                    "type": "string"
                },
                "tokenID": {
                    "type": "integer"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "router.PointHistoryRes": {
            "type": "object",
            "properties": {
                "history": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/router.PointInfo"
                    }
                }
            }
        },
        "router.PointInfo": {
            "type": "object",
            "properties": {
                "actionName": {
                    "type": "string"
                },
                "point": {
                    "type": "integer"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "router.PointInfoRes": {
            "type": "object",
            "properties": {
                "charging": {
                    "type": "boolean"
                },
                "chargingCount": {
                    "type": "integer"
                },
                "godataCount": {
                    "type": "integer"
                },
                "godataSpace": {
                    "type": "integer"
                },
                "points": {
                    "type": "integer"
                }
            }
        },
        "router.ProjectInfo": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "projectID": {
                    "type": "integer"
                },
                "start": {
                    "type": "string"
                }
            }
        },
        "router.RankInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "points": {
                    "type": "integer"
                },
                "rank": {
                    "type": "integer"
                },
                "scores": {
                    "type": "integer"
                }
            }
        },
        "router.RankRes": {
            "type": "object",
            "properties": {
                "rnakInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/router.RankInfo"
                    }
                }
            }
        },
        "router.TweetNFTInfoRes": {
            "type": "object",
            "properties": {
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "postTime": {
                    "type": "integer"
                },
                "tweet": {
                    "type": "string"
                }
            }
        }
    }
}